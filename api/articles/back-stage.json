{"title":"back-stage","uid":"fc5e39806758c28d6affaf6d452a0421","slug":"back-stage","date":"2022-07-10T03:28:23.000Z","updated":"2022-07-12T10:41:06.662Z","comments":true,"path":"api/articles/back-stage.json","keywords":null,"cover":[],"content":"<h2 id=\"6-种组件间通信方式\"><a href=\"#6-种组件间通信方式\" class=\"headerlink\" title=\"6 种组件间通信方式\"></a>6 种组件间通信方式</h2><p><strong>一、 <code>props</code></strong></p>\n<p>适用场景：父子组件通信</p>\n<p>注意事项：</p>\n<p>如果父组件给子组件传递函数：本质其实是希望子组件给父组件传递数据</p>\n<p>如果父组件给子组件传递的数据（非函数）：本质就是父组件直接给子组件传递数据</p>\n<p><code>props</code> 书写方式：3 种</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[&#39;todos&#39;],&#123;type:Array&#125;,&#123;type:Array,default:[]&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>小提示：路由也可以传递 <code>props</code></p>\n<p>书写形式：布尔值，对象，函数形式</p>\n<p><strong>二、自定义事件</strong></p>\n<p>适用于场景：子组件给父组件传递数据</p>\n<ul>\n<li><code>$on</code> 和 <code>$emit</code></li>\n</ul>\n<p><strong>三、全局事件总线<code>$bus</code></strong></p>\n<p><strong>hidden</strong>: true</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$bus <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>四、<code>pubsub-js</code></strong></p>\n<p>在 <code>react</code> 框架的项目中适用比较多，（发布订阅模式）</p>\n<p>同样适用于任意场景</p>\n<p><strong>五、<code>Vuex</code></strong></p>\n<p>适用于场景：子组件给父组件传递数据</p>\n<p><strong>六、插槽</strong></p>\n<p>适用于父子组件通信 — 一般是结构（标签）</p>\n<p>插槽分类有：</p>\n<ul>\n<li>默认插槽</li>\n<li>具名插槽</li>\n<li>作用域插槽</li>\n</ul>\n<h3 id=\"事件注意事项\"><a href=\"#事件注意事项\" class=\"headerlink\" title=\"事件注意事项\"></a>事件注意事项</h3><h4 id=\"Vue事件\"><a href=\"#Vue事件\" class=\"headerlink\" title=\"Vue事件\"></a>Vue事件</h4><ul>\n<li>系统事件 click、双击、鼠标系列等等</li>\n<li>自定义事件</li>\n</ul>\n<p>不管是系统事件还是自定义事件都需要注意事件源、事件类型、以及事件回调</p>\n<ol>\n<li>原生<code>DOM</code>，比如<code>button</code>可以绑定系统事件<code>click</code>单击事件等等</li>\n<li>组件标签 <code>event1</code> 可以绑定系统事件但是不起作用，因为属于自定义事件，需要加上 <code>.native</code> 把自定义事件变为原生<code>DOM</code>事件</li>\n</ol>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;h1&gt;EventTest组件&lt;&#x2F;h1&gt;\n&lt;!-- 原生DOM事件 --&gt;\n&lt;button @click&#x3D;&quot;handler&quot;&gt;原生btn按钮&lt;&#x2F;button&gt;\n&lt;!-- 使用Event1组件：底下这个组件  @click.native 原生DOM事件，给Event1组件的根元素绑定了利用事件的委派点击里面的子元素也会触发事件--&gt;\n&lt;Event1 @click.native&#x3D;&quot;handler1&quot;&gt;&lt;&#x2F;Event1&gt;\n&lt;hr&#x2F;&gt;\n&lt;!-- 自定义事件对于原生DOM没有任何意义 因为给原生DOM绑定是没有 $emit 的 --&gt;\n&lt;!-- &lt;button @erha&#x3D;&quot;handler3&quot;&gt; 原生的btn&lt;&#x2F;button&gt; --&gt;\n&lt;Event2 @click&#x3D;&quot;handler2&quot; @xxx&#x3D;&quot;handler2&quot;&gt;&lt;&#x2F;Event2&gt;\n&lt;!-- 表单元素 color:选取颜色  range：范围条 date：日历 week--&gt;\n&lt;input type&#x3D;&quot;week&quot; &#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"属性修饰符-sync\"><a href=\"#属性修饰符-sync\" class=\"headerlink\" title=\"属性修饰符 sync\"></a>属性修饰符 sync</h3><p><code>:money.sync</code> 代表父组件给子组件传递一个<code>props &#39;money&#39;</code> 同时给当前子组件绑定一个自定义事件 <code>update:money</code></p>\n<h3 id=\"listeners-与-attrs-属性\"><a href=\"#listeners-与-attrs-属性\" class=\"headerlink\" title=\"$listeners 与 $attrs 属性\"></a><code>$listeners</code> 与 <code>$attrs</code> 属性</h3><p>它们两者手势组件实例的属性，可以获取到父组件给子组件传递的<code>props</code> 和自定义事件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;自定义带Hover提示的按钮&lt;&#x2F;h2&gt;\n    &lt;!-- 当用户使用封装好的按钮的时候，需要向HintButton组件传递响应的参数 --&gt;\n    &lt;HintButton\n      type&#x3D;&quot;success&quot;\n      icon&#x3D;&quot;el-icon-delete&quot;\n      size&#x3D;&quot;mini&quot;\n      title&#x3D;&quot;提示按钮&quot;\n      @click&#x3D;&quot;handler&quot;\n    &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport HintButton from &#39;.&#x2F;HintButton&#x2F;index.vue&#39;\nexport default &#123;\n  name: &#39;AttrsListenersTest&#39;,\n  components: &#123;\n    HintButton\n  &#125;,\n  methods: &#123;\n    handler () &#123;\n      console.log(6666)\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 可以利用 a 标签实现按钮带有提示功能 --&gt;\n  &lt;a :title&#x3D;&quot;title&quot;&gt;\n    &lt;!-- 下面的这种写法，不能使用:简写和@简写 --&gt;\n    &lt;el-button v-bind&#x3D;&quot;$attrs&quot; v-on&#x3D;&quot;$listeners&quot;&gt;&lt;&#x2F;el-button&gt;\n  &lt;&#x2F;a&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &quot;&quot;,\n  props: [&#39;title&#39;],\n  mounted () &#123;\n    &#x2F;&#x2F; $attrs属于组件的一个属性。可以获取到父组件传递过来的props数据\n    &#x2F;&#x2F; 对于子组件而言，父组件的数据可以利用props接收，但是需要注意，如果子组件通过props接收的属性，在$attrs属性中是获取不到的\n    console.log(this.$attrs)\n    &#x2F;&#x2F; $listeners 也是组件实例自身的一个属性，它可以获取到父组件给子组件传递的自定义事件\n    console.log(this.$listeners)\n  &#125;\n&#125;;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"children-属性和-parent\"><a href=\"#children-属性和-parent\" class=\"headerlink\" title=\"$children 属性和 $parent\"></a>$children 属性和 $parent</h3><p><code>ref</code> 可以获取到某一个组件、子组件的节点</p>\n<p><code>$children</code> 是组件实例的属性，可以获取到当前组件的全部子组件，<code>$children</code> 返回的是一个数组</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h2&gt;BABA有存款: &#123;&#123; money &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;button @click&#x3D;&quot;JieQianFromXM(100)&quot;&gt;找小明借钱100&lt;&#x2F;button&gt;\n    &lt;br&#x2F;&gt;\n    &lt;button @click&#x3D;&quot;JieQianFromXH(150)&quot;&gt;找小红借钱150&lt;&#x2F;button&gt;\n    &lt;br&#x2F;&gt;\n    &lt;button @click&#x3D;&quot;JieQianAll(200)&quot;&gt;找所有孩子借钱200&lt;&#x2F;button&gt;\n    &lt;br&#x2F;&gt;\n    &lt;br&#x2F;&gt;\n    &lt;!-- 小明 ref 可以获取节点 组价标签 --&gt;\n    &lt;Son ref&#x3D;&quot;xm&quot;&#x2F;&gt;\n    &lt;br&#x2F;&gt;\n    &lt;!-- 小红 --&gt;\n    &lt;Daughter ref&#x3D;&quot;xh&quot;&#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport Son from &quot;.&#x2F;Son&quot;;\nimport Daughter from &quot;.&#x2F;Daughter&quot;;\n\nexport default &#123;\n  name: &quot;ChildrenParentTest&quot;,\n  data () &#123;\n    return &#123;\n      money: 1000,\n    &#125;;\n  &#125;,\n\n  methods: &#123;\n    JieQianFromXM (money) &#123;\n      &#x2F;&#x2F; 父组件的钱数累加100元\n      this.money +&#x3D; money\n      &#x2F;&#x2F; ref 可以获取到真实DOM节点，当然也可以获取到子组件的标签可以操作子组件的数据和方法\n      this.$refs.xm.money -&#x3D; money\n    &#125;,\n    JieQianFromXH (money) &#123;\n      this.money +&#x3D; money\n      this.$refs.xh.money -&#x3D; money\n    &#125;,\n    JieQianAll (money) &#123;\n      &#x2F;&#x2F; 组件实例自身拥有一个属性 $children 可以获取到当前组件中全部的子组件\n      this.$children.forEach(item &#x3D;&gt; &#123;\n        item.money -&#x3D; money\n        this.money +&#x3D; money\n      &#125;)\n    &#125;\n  &#125;,\n\n  components: &#123;\n    Son,\n    Daughter,\n  &#125;,\n&#125;;\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>$parent</code> 组件实例的属性，可以获取当前组件的父组件，进而操作父组件的数据和方法</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div style&#x3D;&quot;background: #ccc; height: 50px;&quot;&gt;\n    &lt;h3&gt;儿子小明: 有存款: &#123;&#123; money &#125;&#125;&lt;&#x2F;h3&gt;\n    &lt;button @click&#x3D;&quot;geiQian(50)&quot;&gt;给BABA钱: 50&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &#39;Son&#39;,\n  data () &#123;\n    return &#123;\n      money: 30000\n    &#125;\n  &#125;,\n\n  methods: &#123;\n    geiQian (money) &#123;\n      this.money -&#x3D; money\n      &#x2F;&#x2F;  需要在子组件内部，获取到父组件，让父组件的数据加上 50\n      this.$parent.money +&#x3D; money\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"混入-mixin\"><a href=\"#混入-mixin\" class=\"headerlink\" title=\"混入 mixin\"></a>混入 <code>mixin</code></h3><p>如果项目当中出现很多结构类似的功能，需要使用组件复用，<code>JS</code> 业务逻辑类似可以使用 <code>mixin</code>，把多个组件<code>JS</code>部分重复的地方进行复用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 对外暴露的对象，放置组件重复的业务逻辑</span>\n <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">giveMoney</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">money</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">-=</span> money\n   <span class=\"token comment\">//  需要在子组件内部，获取到父组件，让父组件的数据加上 50</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">.</span>money <span class=\"token operator\">+=</span> money\n  <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div style&#x3D;&quot;background: #ccc; height: 50px;&quot;&gt;\n    &lt;h3&gt;女儿小红: 有存款: &#123;&#123; money &#125;&#125;&lt;&#x2F;h3&gt;\n    &lt;button @click&#x3D;&quot;giveMoney(100)&quot;&gt;给BABA钱: 100&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script&gt;\nimport mixin from &#39;@&#x2F;pages&#x2F;Communication&#x2F;Mixins&#x2F;mixin&#39;\n\nexport default &#123;\n  name: &#39;Daughter&#39;,\n  mixins: [mixin],\n  data () &#123;\n    return &#123;\n      money: 20000\n    &#125;\n  &#125;,\n&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>插槽可以实现父子组件通信（结构的通信）</p>\n<p>插槽有：</p>\n<ul>\n<li>默认插槽</li>\n<li>具名插槽</li>\n<li>作用域插槽：子组件的数据来源于父组件，子组件是决定不了自身的结构与外观的</li>\n</ul>\n<h2 id=\"后台管理系统项目\"><a href=\"#后台管理系统项目\" class=\"headerlink\" title=\"后台管理系统项目\"></a>后台管理系统项目</h2><p>前台项目：主要针对的是用户</p>\n<p>后台项目：主要面向的是卖家</p>\n<p>比如：前台项目的当中的数据来源于卖家（公司），但是需要注意的是卖家不能直接操作服务器和数据库，对于卖家而言，需要把产品信息上传到服务器，写入数据库。所以需要有一个后台管理项目，帮卖家进行可视化的操作数据库，去对产品进行增删改查。</p>\n<p>卖家（公司）组成：老板、经理、员工</p>\n<p>老板：这个项目对于老板而言，什么都可以操作，比如产品的上架、下架。查看和批改员工的绩效、其它等等。</p>\n<p>员工：只能查看个人绩效、工时等等</p>\n<p>需要注意的是，根据不同的角色（老板、员工），看到的、可以操作的内容都是不同的。</p>\n<p>同时对于后台管理项目，一般而言是不需要用户去注册的。</p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>简洁版：<a href=\"https://github.com/PanJiaChen/vue-admin-template\">https://github.com/PanJiaChen/vue-admin-template</a></p>\n<p>加强版：<a href=\"https://github.com/PanJiaChen/vue-element-admin\">https://github.com/PanJiaChen/vue-element-admin</a></p>\n<p><strong>模板的文件与文件夹认识【简洁版】</strong></p>\n<p><img src=\"/../images/back-stage/image-20220712181145913.png\" alt=\"image-20220712181145913\"></p>\n<p><code>build</code>文件夹</p>\n<ul>\n<li><code>index.js</code> 里面是 <code>webpack</code> 的配置</li>\n</ul>\n<p><code>mock</code>文件夹</p>\n<ul>\n<li><code>mock</code> 文件夹下的文件都是一些模拟的假数据</li>\n</ul>\n<p><code>node_modules</code>文件夹</p>\n<ul>\n<li>存储项目依赖的模块</li>\n</ul>\n<p><code>public</code> 文件夹</p>\n<ul>\n<li>存放了<code>icon</code>图标，以及静态页面，<code>public</code> 文件夹中放置的是一些静态资源，而且打包的时候 <code>webpack</code> 不会编译此文件夹下的内容，会原封不动的打包到<code>dist</code></li>\n</ul>\n<p><code>src</code> 文件夹</p>\n<ul>\n<li><code>api</code> 文件夹：存放<code>ajax</code>请求的文件夹</li>\n<li><code>assets</code> 文件夹：里面放置一些静态资源（一般是共享资源），<code>assets</code> 文件夹里面的静态资源，<code>webpack</code> 打包的时候，会进行编译</li>\n<li><code>components</code>文件夹：一般放置的是非路由组件或全局组件</li>\n<li><code>icons</code> 文件夹：放置<code>SVG</code>矢量图</li>\n<li><code>layout</code>文件夹：放置了一些组件与<code>mixin</code></li>\n<li><code>router</code> 文件夹：路由相关文件</li>\n<li><code>store</code> 文件夹：<code>Vuex</code> 相关文件</li>\n<li><code>style</code> 文件夹：公共样式相关文件</li>\n<li><code>utils</code> 文件夹：<code>request.js</code> 是 <code>axios</code> 二次封装的文件</li>\n<li><code>views</code> 文件夹：里面放置的是路由组件</li>\n<li><code>App.vue</code>：根组件</li>\n<li><code>main.js</code>：入口文件</li>\n<li><code>permission.js</code>：导航守卫相关文件</li>\n<li><code>settings.js</code>：项目配置项文件</li>\n<li><code>.env.development</code> 和 <code>.env.producation</code>：监测是开发环境和生成环境的配置文件</li>\n</ul>\n","feature":true,"text":"6 种组件间通信方式一、 props 适用场景：父子组件通信 注意事项： 如果父组件给子组件传递函数：本质其实是希望子组件给父组件传递数据 如果父组件给子组件传递的数据（非函数）：本质就是父组件直接给子组件传递数据 props 书写方式：3 种 [&#39;todos&#39;]...","link":"","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E7%A7%8D%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">6 种组件间通信方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">事件注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Vue%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">Vue事件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6-sync\"><span class=\"toc-text\">属性修饰符 sync</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#listeners-%E4%B8%8E-attrs-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">$listeners 与 $attrs 属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#children-%E5%B1%9E%E6%80%A7%E5%92%8C-parent\"><span class=\"toc-text\">$children 属性和 $parent</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B7%E5%85%A5-mixin\"><span class=\"toc-text\">混入 mixin</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">插槽</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">后台管理系统项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">模板</span></a></li></ol></li></ol>","author":{"name":"R桑","slug":"blog-author","avatar":"https://img1.baidu.com/it/u=3256850095,2680786815&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：小k编码</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Hexo 隐藏文章","uid":"96b67f8842f46b7b02f3deffef8158e9","slug":"Hexo隐藏文章","date":"2022-07-10T03:30:49.000Z","updated":"2022-07-12T01:18:55.556Z","comments":true,"path":"api/articles/Hexo隐藏文章.json","keywords":null,"cover":null,"text":"使用该 Hexo 插件可以在博客中隐藏指定的文章，并使它们仅可通过链接访问。 当一篇文章被设置为「隐藏」时，它不会出现在任何列表中（包括首页、存档、分类页面、标签页面、Feed、站点地图等），也不会被搜索引擎索引（前提是搜索引擎遵守 noindex 标签）。 只有知道文章链接的人...","link":"","photos":[],"count_time":{"symbolsCount":871,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Hexo","slug":"Hexo","count":1,"path":"api/tags/Hexo.json"}],"author":{"name":"R桑","slug":"blog-author","avatar":"https://img1.baidu.com/it/u=3256850095,2680786815&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：小k编码</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"web前端面试题","uid":"00e814c6dd8c392dd19a02f2418ceb24","slug":"前端面试题","date":"2022-07-07T13:39:33.000Z","updated":"2022-07-11T08:56:51.854Z","comments":true,"path":"api/articles/前端面试题.json","keywords":null,"cover":[],"text":"如何理解SPA应用SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"面试题","slug":"面试题","count":1,"path":"api/tags/面试题.json"}],"author":{"name":"R桑","slug":"blog-author","avatar":"https://img1.baidu.com/it/u=3256850095,2680786815&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：小k编码</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}