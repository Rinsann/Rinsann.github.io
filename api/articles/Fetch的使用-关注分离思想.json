{"title":"Fetch的使用-关注分离思想","uid":"e9014eb277f72a7198d4ff54563938a4","slug":"Fetch的使用-关注分离思想","date":"2022-05-30T13:42:00.000Z","updated":"2022-06-01T09:37:47.591Z","comments":true,"path":"api/articles/Fetch的使用-关注分离思想.json","keywords":null,"cover":null,"content":"<h3 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h3><p>1.拆分组件、实现静态组件，注意：<code>className</code>、<code>style</code>的写法 2.动态初始化列表，如何确定将数据放在那个组件的<code>state</code>中？<br>—— 某个组件使用：放在自身的<code>state</code>中<br>—— 某些组件使用：放在他们共同的父组件 state 中(官方称为：状态提升) 3.关于父子之间的通信： 1.【父组件】给【子组件】传递数据：通过 props 传递 2.【子组件】给【父组件】传递数据：通过 props 传递，要求父组件提前给子组件传递一个函数 4.注意<code>defaultChecked</code> 和 <code>checked</code> 的区别，类似的还有：<code>defaultValue</code> 和 <code>value</code> 5.状态在哪里，操作状态的方法就在哪里。</p>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><ol>\n<li>设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办。</li>\n<li><code>ES6</code>知识点：解构赋值+重命名<ol>\n<li><code>let obj = &#123;a:&#123;b:1&#125;&#125;</code></li>\n<li><code>const &#123;a&#125; = obj;</code> &#x2F;&#x2F;传统解构赋值</li>\n<li><code>const &#123;a:&#123;b&#125;&#125; = obj;</code> &#x2F;&#x2F;连续解构赋值</li>\n<li><code>const &#123;a:&#123;b:value&#125;&#125; = obj;</code> &#x2F;&#x2F;连续解构赋值+重命名</li>\n</ol>\n</li>\n<li>消息订阅与发布机制 1.先订阅，再发布(理解为隔空对话) 2.使用与任何组件间的通信 3.要在组件的<code>componentWillUnmount</code>中取消订阅</li>\n<li><code>fetch</code>发送请求(关注分离的设计思想)</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//获取用户的输入(连续解构赋值+重命名)</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token literal-property property\">keyWordElement</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> keyWord <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span>\n\t<span class=\"token comment\">// 发送请求前通知List更新状态</span>\n\t<span class=\"token comment\">// this.props.updateAppState(&#123; isFirst: false, isLoading: true &#125;)</span>\n\tPubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yminami'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">isFirst</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 发送网络请求(使用axios)</span>\n\t<span class=\"token comment\">// axios.get(`/api1/search/users2?q=$&#123;keyWord&#125;`).then(</span>\n\t<span class=\"token comment\">//   response => &#123;</span>\n\t<span class=\"token comment\">//     // 请求成功后通知App更新状态</span>\n\t<span class=\"token comment\">//     PubSub.publish('yminami', &#123; isLoading: false, users: response.data.items &#125;)</span>\n\t<span class=\"token comment\">//   &#125;,</span>\n\t<span class=\"token comment\">//   error => &#123;</span>\n\t<span class=\"token comment\">//     //请求失败后通知App更新状态</span>\n\t<span class=\"token comment\">//     PubSub.publish('yminami', &#123; isLoading: false, err: error.message &#125;)</span>\n\n\t<span class=\"token comment\">//   &#125;</span>\n\t<span class=\"token comment\">// )</span>\n\t<span class=\"token comment\">//   fetch(`/api1/search/users2?q=$&#123;keyWord&#125;`).then(</span>\n\t<span class=\"token comment\">//     response => &#123;</span>\n\t<span class=\"token comment\">//       console.log('联系服务器成功了');</span>\n\t<span class=\"token comment\">//       return response.json()</span>\n\t<span class=\"token comment\">//     &#125;,</span>\n\t<span class=\"token comment\">//     // error => &#123;</span>\n\t<span class=\"token comment\">//     //   console.log('联系服务器失败了', error);</span>\n\t<span class=\"token comment\">//     //   return new Promise(() => &#123; &#125;)</span>\n\t<span class=\"token comment\">//     // &#125;</span>\n\t<span class=\"token comment\">//   ).then(</span>\n\t<span class=\"token comment\">//     response => &#123; console.log('获取数据成功', response); &#125;,</span>\n\t<span class=\"token comment\">//     // error => &#123; console.log('获取数据失败了', error); &#125;</span>\n\t<span class=\"token comment\">//   ).catch(</span>\n\t<span class=\"token comment\">//     (error) => &#123; console.log('请求出错', error); &#125;</span>\n\t<span class=\"token comment\">//   )</span>\n\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api1/search/users2?q=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>keyWord<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tPubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yminami'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>items <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tPubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yminami'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">isLoading</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">err</span><span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求错误'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"一1.拆分组件、实现静态组件，注意：className、style的写法 2.动态初始化列表，如何确定将数据放在那个组件的state中？—— 某个组件使用：放在自身的state中—— 某些组件使用：放在他们共同的父组件 state 中(官方称为：状态提升) 3.关于父子之间的通信...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"HTTP","slug":"HTTP","count":2,"path":"api/tags/HTTP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80\"><span class=\"toc-text\">一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C\"><span class=\"toc-text\">二</span></a></li></ol>","author":{"name":"R桑","slug":"blog-author","avatar":"https://img1.baidu.com/it/u=3256850095,2680786815&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：小k编码</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"我们在浏览器中输入URL并回车后都发生了什么？","uid":"c9bf0a586238a4fe73dc5b5acc64d356","slug":"我们在浏览器中输入URL并回车后都发生了什么？","date":"2022-06-01T09:27:47.000Z","updated":"2022-06-02T06:00:35.270Z","comments":true,"path":"api/articles/我们在浏览器中输入URL并回车后都发生了什么？.json","keywords":null,"cover":[],"text":" 一、解析 URLURL（Universal Resource Locator）：统一资源定位符。俗称网页地址或者网址。URL用来表示某个资源的地址。（通过俗称就能看出来） URL 主要由以下几个部分组成： 传输协议 服务器 域名 端口 虚拟目录 文件名 锚 参数 现在来讨论UR...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"HTTP","slug":"HTTP","count":2,"path":"api/tags/HTTP.json"}],"author":{"name":"R桑","slug":"blog-author","avatar":"https://img1.baidu.com/it/u=3256850095,2680786815&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：小k编码</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"发布轮子到npm","uid":"46cbb2bb63f1ff3e16d9556aa8441940","slug":"发布轮子到npm","date":"2022-05-29T06:20:31.000Z","updated":"2022-05-29T06:20:43.246Z","comments":true,"path":"api/articles/发布轮子到npm.json","keywords":null,"cover":null,"text":"发布轮子到 npm要做两件事部署官网 让官网上线，有好的文档才更容易让人使用 发布 sakura-ui 让其他开发者可以使用 npm install sakura-ui 安装源码 发布你的官网// 其实就是把 dist 目录上传到网上 yarn build 时要注意设置 buil...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"npm","slug":"npm","count":1,"path":"api/tags/npm.json"}],"author":{"name":"R桑","slug":"blog-author","avatar":"https://img1.baidu.com/it/u=3256850095,2680786815&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=500","link":"/","description":"一位正在重塑知识的技术人 <br /> @ <b>公众号：小k编码</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}